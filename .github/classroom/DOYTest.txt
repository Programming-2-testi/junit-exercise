import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.time.YearMonth;

import org.junit.jupiter.api.Test;

import refactoring.DayOfYear;

public class DOYTest {

    @Test
    void testFirstDayOfYear() {
        int result = DayOfYear.dayOfYear(1, 1, 2020);

        assertEquals(1, result);
    }

    @Test
    void testLastDayOfNormalYear() {
        int result = DayOfYear.dayOfYear(12, 31, 2019);

        assertEquals(365, result);
    }

    @Test
    void testLastDayOfLeapYear() {
        assertEquals(366, DayOfYear.dayOfYear(12, 31, 2020));
    }

    @Test
    void testMiddleOfTheYear() {
        // leap year
        assertEquals(172, DayOfYear.dayOfYear(6, 20, 2020));

        // normal year
        assertEquals(171, DayOfYear.dayOfYear(6, 20, 2019));
    }

    @Test
    void testFirstDaysOfEachMonthOnNormalYear() {
        for (int month = 1; month <= 12; month++) {
            YearMonth yearMonth = YearMonth.of(2029, month);
            LocalDate firstDayOfMonth = yearMonth.atDay(1);

            testDayOfYear(firstDayOfMonth);
        }
    }

    @Test
    void testFirstDaysOfEachMonthOnLeapYear() {
        for (int month = 1; month <= 12; month++) {
            YearMonth yearMonth = YearMonth.of(2040, month);
            LocalDate firstDayOfMonth = yearMonth.atDay(1);

            testDayOfYear(firstDayOfMonth);
        }
    }

    @Test
    void testLastDaysOfEachMonthOnNormalYear() {
        for (int month = 1; month <= 12; month++) {
            YearMonth yearMonth = YearMonth.of(2029, month);
            LocalDate lastDayOfMonth = yearMonth.atEndOfMonth();

            testDayOfYear(lastDayOfMonth);
        }
    }

    @Test
    void testLastDaysOfEachMonthOnLeapYear() {
        for (int month = 1; month <= 12; month++) {
            YearMonth yearMonth = YearMonth.of(2040, month);
            LocalDate lastDayOfMonth = yearMonth.atEndOfMonth();

            testDayOfYear(lastDayOfMonth);
        }
    }

    private void testDayOfYear(LocalDate date) {
        int expected = date.getDayOfYear();
        int result = DayOfYear.dayOfYear(date.getMonthValue(), date.getDayOfMonth(), date.getYear());

        assertEquals(expected, result, "Day " + date + " should be " + expected + " but it was " + result);
    }
}
